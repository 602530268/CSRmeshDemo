{    "PSKEY_DATABASE": {      "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",      "VERSION": "1",      "xsi:noNamespaceSchemaLocation": "pskey.xsd",      "PSKEYS": [        {          "BUILD_ID": "50",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.  "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key  sets the  frequency trim  for the 16 MHz crystal  which in  turn fine-tunes  the RF  frequencies used.   This value must be  set on a  per-module basis.  Legitimate  values range from 0 to 63."            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the nvs_read_user_key() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "19200" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are defined in the enum io_uart_rate, which should  be consulted to get the correct value for the desired rate,  as the values are not straightforward.    Baud rates defined as UART_SLOW_RATE_* indicate rates that  can be used to drive the UART from the 32kHz clock rather  than the 16MHz crystal. This has the advantage that the  UART can be used when Deep Sleep is enabled without  having to wake the chip via the WAKE pin before transmitting  to it. However, the disadvantage is that only a limited set  of low baud rates are available in this mode. If a higher  baud rate is required then either Deep Sleep cannot be used  or the Host processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "997"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "1023"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },                        {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these thee modes, see the definition of the sleep_mode  enumerated type in sleep.h        "            },            {              "NAME": "slave_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Slave sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0 to 15, where 0 is the lowest supported drive  level and 15 is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0 to 15, where 0 is the lowest supported drive  level and 15 is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at runtime.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            }          ]        },        {          "BUILD_ID": "51",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "19200" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are defined in the enum io_uart_rate, which should  be consulted to get the correct value for the desired rate,  as the values are not straightforward.    Baud rates defined as UART_SLOW_RATE_* indicate rates that  can be used to drive the UART from the 32kHz clock rather  than the 16MHz crystal. This has the advantage that the  UART can be used when Deep Sleep is enabled without  having to wake the chip via the WAKE pin before transmitting  to it. However, the disadvantage is that only a limited set  of low baud rates are available in this mode. If a higher  baud rate is required then either Deep Sleep cannot be used  or the Host processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "997"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "1023"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these thee modes, see the definition of the SleepMode  enumerated type in sleep.h        "            },            {              "NAME": "slave_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Slave sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            }          ]        },        {          "BUILD_ID": "52",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "19200" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12C0  - UART_SLOW_RATE_9K6 = 0x4b00    Baud rates defined as UART_SLOW_RATE_X indicate rates that  drive the UART from the 32kHz clock rather  than the 16MHz crystal. This has the advantage that the  UART can be used when Deep Sleep is enabled without  having to wake the chip via the WAKE pin before transmitting  to it. However, the disadvantage is that only a limited set  of low baud rates are available in this mode. If a higher  baud rate is required then either Deep Sleep cannot be used  or the Host processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "997"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "1023"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'SleepMode'  enumerated type defined in sleep.h        "            },            {              "NAME": "slave_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Slave sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            }          ]        },        {          "BUILD_ID": "53",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "19200" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12C0  - UART_SLOW_RATE_9K6 = 0x4b00    Baud rates defined as UART_SLOW_RATE_X indicate rates that  drive the UART from the 32kHz clock rather  than the 16MHz crystal. This has the advantage that the  UART can be used when Deep Sleep is enabled without  having to wake the chip via the WAKE pin before transmitting  to it. However, the disadvantage is that only a limited set  of low baud rates are available in this mode. If a higher  baud rate is required then either Deep Sleep cannot be used  or the Host processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "997"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "1023"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "slave_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Slave sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "8221",                  "1200",                  "1400"                ]              },              "LABEL": "Sixteen MHz crystal's wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            }          ]        },        {          "BUILD_ID": "54",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "19200" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12C0  - UART_SLOW_RATE_9K6 = 0x4b00    Baud rates defined as UART_SLOW_RATE_X indicate rates that  drive the UART from the 32kHz clock rather  than the 16MHz crystal. This has the advantage that the  UART can be used when Deep Sleep is enabled without  having to wake the chip via the WAKE pin before transmitting  to it. However, the disadvantage is that only a limited set  of low baud rates are available in this mode. If a higher  baud rate is required then either Deep Sleep cannot be used  or the Host processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "997"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "1023"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "slave_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Slave sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              " NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "8221",                  "1200",                  "1400"                ]              },              "LABEL": "Sixteen MHz crystal's wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat abitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            }          ]        },        {          "BUILD_ID": "55",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "19200" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12C0  - UART_SLOW_RATE_9K6 = 0x4b00    Baud rates defined as UART_SLOW_RATE_X indicate rates that  drive the UART from the 32kHz clock rather  than the 16MHz crystal. This has the advantage that the  UART can be used when Deep Sleep is enabled without  having to wake the chip via the WAKE pin before transmitting  to it. However, the disadvantage is that only a limited set  of low baud rates are available in this mode. If a higher  baud rate is required then either Deep Sleep cannot be used  or the Host processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "2021"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "2047"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "8221",                  "1200",                  "1400"                ]              },              "LABEL": "Sixteen MHz crystal's wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat abitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            }          ]        },        {          "BUILD_ID": "57",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "19200" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12C0  - UART_SLOW_RATE_9K6 = 0x4b00    Baud rates defined as UART_SLOW_RATE_X indicate rates that  drive the UART from the 32kHz clock rather  than the 16MHz crystal. This has the advantage that the  UART can be used when Deep Sleep is enabled without  having to wake the chip via the WAKE pin before transmitting  to it. However, the disadvantage is that only a limited set  of low baud rates are available in this mode. If a higher  baud rate is required then either Deep Sleep cannot be used  or the Host processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "4069"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "4095"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "8221",                  "1200",                  "1400"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the start address for the application Non-Volatile Memory area  within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "128" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in bytes) of the NVM region writable by the application.  This is the amount of data that the application can store.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size of a single erasable block within the SPI  Flash boot device, and is used by the NVM driver. This information is  usually obtained from the datasheet for the selected memory device.    If the SPI Flash Block Size is a multiple of \"NVM Size\" then the NVM  driver is able to write to the NVM multiple times before the SPI Flash  block need to be erased. This reduces the chance of data corruption if  the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  erasable SPI Flash memory blocks that are available for the NVM.    If two blocks are available then when the first block becomes full, the  NVM driver will be able to copy the information into the second (spare)  block before the first block is erased. This will reduce the chance of  data corruption if the power fails during a write operation. If only one  block is available, then when it becomes full it will need to be fully  erased before new information can be stored. This introduces a small  window in which power loss could result in loss of data.    The current implementation of the NVM driver only supports a maximum of  two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            }          ]        },        {          "BUILD_ID": "58",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "19200" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12C0  - UART_SLOW_RATE_9K6 = 0x4b00    Baud rates defined as UART_SLOW_RATE_X indicate rates that  drive the UART from the 32kHz clock rather  than the 16MHz crystal. This has the advantage that the  UART can be used when Deep Sleep is enabled without  having to wake the chip via the WAKE pin before transmitting  to it. However, the disadvantage is that only a limited set  of low baud rates are available in this mode. If a higher  baud rate is required then either Deep Sleep cannot be used  or the Host processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "4069"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "4095"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "12076",                  "1669",                  "1869"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            }          ]        },        {          "BUILD_ID": "59",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "19200" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12C0  - UART_SLOW_RATE_9K6 = 0x4b00    Baud rates defined as UART_SLOW_RATE_X indicate rates that  drive the UART from the 32kHz clock rather  than the 16MHz crystal. This has the advantage that the  UART can be used when Deep Sleep is enabled without  having to wake the chip via the WAKE pin before transmitting  to it. However, the disadvantage is that only a limited set  of low baud rates are available in this mode. If a higher  baud rate is required then either Deep Sleep cannot be used  or the Host processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "4069"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "4095"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            }          ]        },        {          "BUILD_ID": "60",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "4069"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "4095"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            }          ]        },        {          "BUILD_ID": "61",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "4069"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "4095"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            }          ]        },        {          "BUILD_ID": "62",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "8165"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "8191"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            }          ]        },        {          "BUILD_ID": "63",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "8165"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "8191"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            }          ]        },        {          "BUILD_ID": "64",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "8165"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "8191"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "150" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            }          ]        },        {          "BUILD_ID": "65",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "16357"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "16383"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "150" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            }          ]        },        {          "BUILD_ID": "66",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "16357"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "16383"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "90" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            }          ]        },        {          "BUILD_ID": "67",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "16357"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "16383"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "90" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            }          ]        },        {          "BUILD_ID": "71",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "65535"                ]              },              "LABEL": "Report faults to host (deprecated)",              "DESCRIPTION": "  There used to be fine grained control of which faults caused a  report to be sent to the host.  This functionality has been removed.    All faults are reported to the host.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "65535"                ]              },              "LABEL": "Cause faults to panic (deprecated)",              "DESCRIPTION": "  There used to be fine grained control of which faults caused a  report to be sent to the host.  This functionality has been removed.    All faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "90" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            }          ]        },        {          "BUILD_ID": "68",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "16357"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "16383"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "90" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            },            {              "NAME": "tx_power_trim",              "ID": "35",              "OFFSET": "64",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "TX power attenuation",              "DESCRIPTION": "  This key controls the level of global attenuation for the transmitter  and should only be changed on advice from CSR.        "            }          ]        },        {          "BUILD_ID": "72",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "65535"                ]              },              "LABEL": "Report faults to host (deprecated)",              "DESCRIPTION": "  There used to be fine grained control of which faults caused a  report to be sent to the host.  This functionality has been removed.    All faults are reported to the host.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "65535"                ]              },              "LABEL": "Cause faults to panic (deprecated)",              "DESCRIPTION": "  There used to be fine grained control of which faults caused a  report to be sent to the host.  This functionality has been removed.    All faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "90" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            },            {              "NAME": "xtal_ftrim_keys",              "ID": "35",              "OFFSET": "64",              "LENGTH": "10",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "XTAL ftrim keys",              "DESCRIPTION": "  This key sets five pairs of temperature/ftrim values which are used to  perform a temperature trim compensation on the 16MHz XTAL. Setting the  first pair of values (and each subsequent pair), will cause the temperature  trim compensation algorithm to be applied. Setting the first pair of values  to zero will cause this algorithm not to be applied.    These settings should only be changed on advice from CSR.        "            }          ]        },        {          "BUILD_ID": "73",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "16357"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "16383"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "90" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            },            {              "NAME": "xtal_ftrim_keys",              "ID": "35",              "OFFSET": "64",              "LENGTH": "10",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "XTAL ftrim keys",              "DESCRIPTION": "  This key sets five pairs of temperature/ftrim values which are used to  perform a temperature trim compensation on the 16MHz XTAL. Setting the  first pair of values (and each subsequent pair), will cause the temperature  trim compensation algorithm to be applied. Setting the first pair of values  to zero will cause this algorithm not to be applied.    These settings should only be changed on advice from CSR.        "            }          ]        },        {          "BUILD_ID": "74",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "16357"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "16383"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "90" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            },            {              "NAME": "xtal_ftrim_keys",              "ID": "35",              "OFFSET": "64",              "LENGTH": "10",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Crystal frequency compensation keys",              "DESCRIPTION": "  This key sets five pairs of \"temperature/crystal freqency compensation\"  values which are used to perform a temperature related crystal frequency  trim compensation on the 16MHz crystal. Setting the first pair of values  (and each subsequent pair), will cause the temperature trim compensation  algorithm to be applied. Setting the first pair of values to zero will  cause this algorithm not to be applied.    These settings should only be changed on advice from CSR.        "            }          ]        },        {          "BUILD_ID": "75",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "65535"                ]              },              "LABEL": "Report faults to host (deprecated)",              "DESCRIPTION": "  There used to be fine grained control of which faults caused a  report to be sent to the host.  This functionality has been removed.    All faults are reported to the host.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "65535"                ]              },              "LABEL": "Cause faults to panic (deprecated)",              "DESCRIPTION": "  There used to be fine grained control of which faults caused a  report to be sent to the host.  This functionality has been removed.    All faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "90" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            },            {              "NAME": "default_store_id",              "ID": "35",              "OFFSET": "64",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Default Application Store ID",              "DESCRIPTION": "  This key sets the default Application Store ID. When the system boots this  store ID will be searched for. If found, the corresponding application will  be initialised by the AppLauncher Task.        "            },            {              "NAME": "default_sqif_pios",              "ID": "36",              "OFFSET": "65",              "LENGTH": "6",              "DEFAULT": {                "DEFAULTVALUE": [                  "33",                  "34",                  "35",                  "36",                  "255",                  "255"                ]              },              "LABEL": "Default PIO assignments for SQIF controller",              "DESCRIPTION": "  Default PIO assignments used by the SQIF controller. Note that not all  PIOs are suitable for use with this controller. Generally speaking there  are 3 sets of PIOs to choose from.        "            }          ]        },        {          "BUILD_ID": "76",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "65535"                ]              },              "LABEL": "Report faults to host (deprecated)",              "DESCRIPTION": "  There used to be fine grained control of which faults caused a  report to be sent to the host.  This functionality has been removed.    All faults are reported to the host.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "65535"                ]              },              "LABEL": "Cause faults to panic (deprecated)",              "DESCRIPTION": "  There used to be fine grained control of which faults caused a  report to be sent to the host.  This functionality has been removed.    All faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "90" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            }          ]        },        {          "BUILD_ID": "77",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "16357"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "16383"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "1250" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            },            {              "NAME": "xtal_ftrim_keys",              "ID": "35",              "OFFSET": "64",              "LENGTH": "10",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Crystal frequency compensation keys",              "DESCRIPTION": "  This key sets five pairs of \"temperature/crystal freqency compensation\"  values which are used to perform a temperature related crystal frequency  trim compensation on the 16MHz crystal. Setting the first pair of values  (and each subsequent pair), will cause the temperature trim compensation  algorithm to be applied. Setting the first pair of values to zero will  cause this algorithm not to be applied.    These settings should only be changed on advice from CSR.        "            }          ]        },        {          "BUILD_ID": "78",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "16357"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "16383"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "1250" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            },            {              "NAME": "xtal_ftrim_keys",              "ID": "35",              "OFFSET": "64",              "LENGTH": "10",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Crystal frequency compensation keys",              "DESCRIPTION": "  This key sets five pairs of \"temperature/crystal freqency compensation\"  values which are used to perform a temperature related crystal frequency  trim compensation on the 16MHz crystal. Setting the first pair of values  (and each subsequent pair), will cause the temperature trim compensation  algorithm to be applied. Setting the first pair of values to zero will  cause this algorithm not to be applied.    These settings should only be changed on advice from CSR.        "            },            {              "NAME": "bluetooth_version",              "ID": "44",              "OFFSET": "74",              "LENGTH": "1",              "MAX": "7",              "MIN": "6",              "DEFAULT": { "DEFAULTVALUE": "7" },              "LABEL": "Bluetooth Version",              "DESCRIPTION": "  This key defines if the Bluetooth stack operates as a 4.0 or 4.1 stack.    6 = 4.0 and 7 = 4.1        "            }          ]        },        {          "BUILD_ID": "79",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "24" },              "LABEL": "UART baud rate",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The baud rate  is expressed in 100-baud units, for example 2400 baud is 24,  115,200 baud is 1152. In theory any rate in the range 24 to  36864 (3.68Mbaud) can be selected, although CSR only test a  limited number of standard rates (such as 2400, 115200).    The firmware will select an appropriate source clock for the  UART hardware based on the selected baud rate, to allow the  UART to operate in deep sleep at lower baud rates. For example  2400 baud will use the 32K slow clock rather than require the  16M crystal to remain on while sleeping.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "65535"                ]              },              "LABEL": "Report faults to host (deprecated)",              "DESCRIPTION": "  There used to be fine grained control of which faults caused a  report to be sent to the host.  This functionality has been removed.    All faults are reported to the host.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "65535"                ]              },              "LABEL": "Cause faults to panic (deprecated)",              "DESCRIPTION": "  There used to be fine grained control of which faults caused a  report to be sent to the host.  This functionality has been removed.    All faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "262" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 250ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "48",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "49",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "50",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "52",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "53",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "55",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "90" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            }          ]        },        {          "BUILD_ID": "80",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "24" },              "LABEL": "UART baud rate",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The baud rate  is expressed in 100-baud units, for example 2400 baud is 24,  115,200 baud is 1152. In theory any rate in the range 24 to  36864 (3.68Mbaud) can be selected, although CSR only test a  limited number of standard rates (such as 2400, 115200).    The firmware will select an appropriate source clock for the  UART hardware based on the selected baud rate, to allow the  UART to operate in deep sleep at lower baud rates. For example  2400 baud will use the 32K slow clock rather than require the  16M crystal to remain on while sleeping.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "65535"                ]              },              "LABEL": "Report faults to host (deprecated)",              "DESCRIPTION": "  There used to be fine grained control of which faults caused a  report to be sent to the host.  This functionality has been removed.    All faults are reported to the host.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "65535"                ]              },              "LABEL": "Cause faults to panic (deprecated)",              "DESCRIPTION": "  There used to be fine grained control of which faults caused a  report to be sent to the host.  This functionality has been removed.    All faults cause a panic.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "24",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "25",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "33",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "41",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "42",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "43",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the CSR1000 boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "44",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "45",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "48",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "49",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "50",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "90" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            }          ]        },        {          "BUILD_ID": "81",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "16357"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "16383"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation. If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "1250" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            },            {              "NAME": "xtal_ftrim_keys",              "ID": "35",              "OFFSET": "64",              "LENGTH": "10",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Crystal frequency compensation keys",              "DESCRIPTION": "  This key sets five pairs of \"temperature/crystal freqency compensation\"  values which are used to perform a temperature related crystal frequency  trim compensation on the 16MHz crystal. Setting the first pair of values  (and each subsequent pair), will cause the temperature trim compensation  algorithm to be applied. Setting the first pair of values to zero will  cause this algorithm not to be applied.    These settings should only be changed on advice from CSR.        "            },            {              "NAME": "bluetooth_version",              "ID": "44",              "OFFSET": "74",              "LENGTH": "1",              "MAX": "7",              "MIN": "6",              "DEFAULT": { "DEFAULTVALUE": "7" },              "LABEL": "Bluetooth Version",              "DESCRIPTION": "  This key defines if the Bluetooth stack operates as a 4.0 or 4.1 stack.    6 = 4.0 and 7 = 4.1        "            }          ]        },        {          "BUILD_ID": "82",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "16357"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "16383"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.    For I2C EEPROM devices greater than 128 kilo bytes, this address is  offset within the page where it starts. User needs to set device address  (see NvmSetI2cEepromDeviceAddress) according to page being accessed.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device and should be set accordingly. It is mandatory to be set to  flash erase sector size if nvm_num_spi_blocks is 2.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation.  If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "1250" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            },            {              "NAME": "xtal_ftrim_keys",              "ID": "35",              "OFFSET": "64",              "LENGTH": "10",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Crystal frequency compensation keys",              "DESCRIPTION": "  This key sets five pairs of \"temperature/crystal freqency compensation\"  values which are used to perform a temperature related crystal frequency  trim compensation on the 16MHz crystal. Setting the first pair of values  (and each subsequent pair), will cause the temperature trim compensation  algorithm to be applied. Setting the first pair of values to zero will  cause this algorithm not to be applied.    These settings should only be changed on advice from CSR.        "            },            {              "NAME": "bluetooth_version",              "ID": "44",              "OFFSET": "74",              "LENGTH": "1",              "MAX": "7",              "MIN": "6",              "DEFAULT": { "DEFAULTVALUE": "7" },              "LABEL": "Bluetooth Version",              "DESCRIPTION": "  This key defines if the Bluetooth stack operates as a 4.0 or 4.1 stack.    6 = 4.0 and 7 = 4.1        "            }          ]        },        {          "BUILD_ID": "83",          "PSKEY": [            {              "NAME": "bdaddr",              "ID": "1",              "OFFSET": "1",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "5392",                  "23296",                  "2"                ]              },              "LABEL": "Bluetooth device address",              "DESCRIPTION": "  The local device's Bluetooth address.  This should be unique to  this device, allocated during manufacturing.    The default value of this key is one of CSR's legal addresses:  00025b001510    As stated in the Bluetooth specification, LAP values from  9e8b00 up to, and including, 9e8b3f must not be used as this range  is reserved for inquiry access codes (IACs).    Bluetooth module manufacturers must obtain their own block of  addresses from the Bluetooth SIG/IEEE.  If CSR's experience is  typical, these authorities define the NAP and UAP, allowing  manufacturers to set the 24 bit LAP.        "            },            {              "NAME": "crystal_ftrim",              "ID": "2",              "OFFSET": "4",              "LENGTH": "1",              "MAX": "63",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "32" },              "LABEL": "Crystal frequency trim",              "DESCRIPTION": "  This key sets the frequency trim for the 16 MHz crystal which  in turn fine-tunes the RF frequencies used.  This value must be  set on a per-module basis.  Legitimate values range from 0 to 63.        "            },            {              "NAME": "radio_rx_adc_config",              "ID": "3",              "OFFSET": "5",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0"                ]              },              "LABEL": "Radio receiver's RX ADC config",              "DESCRIPTION": "  Table of coefficients used to configure the receiver's ADC.  These settings should only be changed on advice from CSR.        "            },            {              "NAME": "user_keys",              "ID": "4",              "OFFSET": "8",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "User keys",              "DESCRIPTION": "  A set of eight unsigned integer keys that are available to  applications. A developer can set the keys to any value they  require, and read the values back via the CSReadUserKey() API.        "            },            {              "NAME": "uart_rate",              "ID": "5",              "OFFSET": "16",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4800" },              "LABEL": "UART connection speed",              "DESCRIPTION": "  Sets the baud rate of the UART connection.  The possible  values are described below. Care should be taken to get the  correct value for the desired rate, as the values are not  straightforward.  Non-standard baud rates can be set; contact  CSR for more information.    - UART_RATE_2K4      = 0x000a  - UART_RATE_9K6      = 0x0028  - UART_RATE_19K2     = 0x004e  - UART_RATE_38K4     = 0x009e  - UART_RATE_57K6     = 0x00eb  - UART_RATE_115K2    = 0x01d9  - UART_RATE_230K4    = 0x03af  - UART_RATE_460K8    = 0x0760  - UART_RATE_921K6    = 0x0ebf  - UART_RATE_1382K4   = 0x161f  - UART_RATE_1843K2   = 0x1d7e  - UART_RATE_2764K8   = 0x2c3d  - UART_RATE_3686K4   = 0x3afc    - UART_SLOW_RATE_2K4 = 0x12c0    The baud rate defined as UART_SLOW_RATE_X indicates a rate  that drives the UART from the 32kHz clock rather than  the 16MHz crystal.  This has the advantage that the UART  can be used when Deep Sleep is enabled without having to  wake the chip using the WAKE pin before transmitting  to it.  However, the disadvantage is that only one low baud  rate is available in this mode.  If a higher baud rate is  required then either Deep Sleep cannot be used or the Host  processor must assert WAKE before transmitting.        "            },            {              "NAME": "uart_config",              "ID": "6",              "OFFSET": "17",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "UART configuration",              "DESCRIPTION": "  Sets the configuration of the UART. The parameter is a 16-bit bitfield  where the meaning of the bits is:    0 - if set, use two stop bits (else use one stop bit).  1 - if set, use one parity bit (else use no parity bit).  2 - if set, use even parity.  3 - if set, enable flow control.  4 - if set, enables automatic RTS flow control.  6 - if set, forces the transmit output to zero.    All other bits are reserved and must be left clear.        "            },            {              "NAME": "tx_power_level",              "ID": "7",              "OFFSET": "18",              "LENGTH": "1",              "MAX": "7",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "4" },              "LABEL": "Transmit power level",              "DESCRIPTION": "  This number is not a transmit output power in dBm, it instead  selects one of 8 pre-defined power levels, where 0 is the lowest  and 7 the highest.    Since the output power will vary from design to design the  customer should select the best setting for their application by  test on their own hardware during development.    Typically, for a given design, the output power will not vary  much between individual boards of the same design, but this is  not guaranteed by CSR and nor are the absolute power values obtained.        "            },            {              "NAME": "err_report_fault",              "ID": "8",              "OFFSET": "19",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "63487",                  "16357"                ]              },              "LABEL": "Report faults to host",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause the fault to be reported up to the host.  In counting bits, the first word of the behaviour array contains  the least significant bits, bit 0 being the least significant  bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    The default settings are to report all faults where the fault  isn't part of the problem.  Raising an application Panic() will  not normally raise a fault report.        "            },            {              "NAME": "err_panic",              "ID": "9",              "OFFSET": "21",              "LENGTH": "2",              "DEFAULT": {                "DEFAULTVALUE": [                  "65535",                  "16383"                ]              },              "LABEL": "Cause faults to panic",              "DESCRIPTION": "  This key needs to be modified for every new system error being  added.  It is a bitmap; if bit 'n' is set, then raising fault  number 'n' will cause a panic.  If the \"err_report_fault\" bit  for the fault is set too, the fault will be reported before  panicking.  In counting bits, the first word of the behaviour  array contains the least significant bits, bit 0 being the least  significant bit of that word.    Note that FAULT_NONE (error number 0) does have an entry in the  key (indexed at word 0 and occupying bit 0 of that word).    By default, all faults cause a panic.        "            },            {              "NAME": "wd_timeout",              "ID": "10",              "OFFSET": "23",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "30000" },              "LABEL": "Watchdog timeout",              "DESCRIPTION": "  Watchdog timeout delay period in milliseconds.  The default  value is thirty seconds.  The watchdog can be disabled by setting  this value to zero. Otherwise it must be greater than the watchdog  period \"wd_period\" and is recommended to be at least 125% of that  value.        "            },            {              "NAME": "wd_period",              "ID": "11",              "OFFSET": "24",              "LENGTH": "1",              "MIN": "1000",              "DEFAULT": { "DEFAULTVALUE": "15000" },              "LABEL": "Watchdog period",              "DESCRIPTION": "  The period in milliseconds after which the watchdog task will run.  This task serves two purposes: kick the watchdog to prevent it timing  out (if it is enabled) and run other regular update tasks required to  keep the radio operating within accepted parameters (radio trimming).  The default value is fifteen seconds. The watchdog period must be set,  even if the watchdog timeout is zero. The minimum allowed value is one  second.        "            },            {              "NAME": "sleep_mode",              "ID": "12",              "OFFSET": "25",              "LENGTH": "1",              "MAX": "2",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "Sleep mode",              "DESCRIPTION": "  This key controls the sleep behaviour of the chip from power-up.  The chip can be configured to use Deep Sleep, Shallow Sleep, or  remain Always Awake. For a full description of the differences  between these modes, see the definition of the 'sleep_mode'  enumerated type defined in sleep.h        "            },            {              "NAME": "sleep_clock_accuracy",              "ID": "13",              "OFFSET": "26",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "157" },              "LABEL": "Sleep clock accuracy allowance",              "DESCRIPTION": "  Sets the allowance made for the accuracy of the sleep clock in  parts per 2^20, when operating as a slave device. The default  value is approximately 150ppm. This value will need to change  to match the accuracy of the crystal components selected for  any particular board design. When a master device, this is also  used to determine the SCA field in connection requests.        "            },            {              "NAME": "debug_sleep_clock",              "ID": "14",              "OFFSET": "27",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "15" },              "LABEL": "Sleep clock debug signal",              "DESCRIPTION": "  Route sleep clock debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the clock signal.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_rx",              "ID": "15",              "OFFSET": "28",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "9" },              "LABEL": "Radio RX event debug signal",              "DESCRIPTION": "  Route radio RX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio receive activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "debug_radio_tx",              "ID": "16",              "OFFSET": "29",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "Radio TX event debug signal",              "DESCRIPTION": "  Route radio TX event debug signal to one of the PIOs. Set bit 15 to enable  the debug signal and set bits 4:0 to the integer PIO number (0-31) for  the PIO pin on which to present the debug signal. The PIO will go high for  the duration of any radio transmit activities.    You must ensure that the PIO is not used for anything else by the firmware  or application.        "            },            {              "NAME": "identity_root",              "ID": "17",              "OFFSET": "30",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Identity Root",              "DESCRIPTION": "  Identity Root (IR) is a 128-bit key generated for each LE device that  supports encrypted connections, random addresses or data signing.    The IR is used to generate the Identity Resolving Key (IRK).        "            },            {              "NAME": "encryption_root",              "ID": "18",              "OFFSET": "38",              "LENGTH": "8",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Encryption Root",              "DESCRIPTION": "  Encryption Root (ER) is a 128-bit key generated for each LE device that  supports encrypted connections. It is used to generate the LTK and CSRK.    The Connection Signature Resolving Key (CSRK) is used to sign  data and verify signatures on the receiving device.    The Long Term Key (LTK) is used to generate the contributory session  key for an encrypted connection.        "            },            {              "NAME": "xtal32k_level",              "ID": "19",              "OFFSET": "46",              "LENGTH": "1",              "MAX": "15",              "MIN": "0",              "DEFAULT": { "DEFAULTVALUE": "10" },              "LABEL": "32kHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 32KHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_level",              "ID": "20",              "OFFSET": "47",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "32783" },              "LABEL": "16MHz crystal drive level",              "DESCRIPTION": "  This key sets the drive level for the 16MHz crystal. Legitimate  values range from 0x00 to 0x0F, where 0x00 is the lowest supported drive  level and 0x0F is the highest supported drive level.    If bit 15 is set, then the optimal drive level will be calculated at  runtime instead of using the fixed value in the CS key.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "xtal16m_wakeup",              "ID": "21",              "OFFSET": "48",              "LENGTH": "3",              "DEFAULT": {                "DEFAULTVALUE": [                  "18244",                  "2413",                  "2613"                ]              },              "LABEL": "16MHz crystal wakeup parameters",              "DESCRIPTION": "  Table of coefficients used to configure the 16MHz crystal's wakeup  parameters.    WARNING! These values are critical for correct system operation  and should only be changed on advice from CSR.        "            },            {              "NAME": "battery_threshold",              "ID": "22",              "OFFSET": "51",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2500" },              "LABEL": "Battery \"low\" threshold voltage",              "DESCRIPTION": "  This key sets the battery \"low\" threshold voltage. If the battery  voltage drops below this level a \"battery low\" event will be sent  to the application. If the voltage then rises above the threshold  another event will be sent to the application.    The voltage is expressed in millivolts. The default value chosen  is somewhat arbitrary, as it will depend on the battery technology  selected for the product. If the threshold is set to 0 then no  events will be sent to the application.        "            },            {              "NAME": "nvm_start_address",              "ID": "23",              "OFFSET": "52",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "61440" },              "LABEL": "NVM Start Address",              "DESCRIPTION": "  Define the *byte* start address for the application Non-Volatile Memory  area within the boot device (I2C EEPROM or SPI Flash). The default  value is chosen to be at the high end of the device, which should  leave enough room for any size of application. However customers are  recommended to always confirm that the application image does not  overlap the NVM area.    For SPI Flash devices, this address must align with the start of a  SPI Flash memory block.    For I2C EEPROM devices greater than 64 kilobytes, this address is the  offset within the page where it starts. The application needs to set the  device address (see NvmSetI2cEepromDeviceAddress) according to page being  accessed.        "            },            {              "NAME": "nvm_size",              "ID": "24",              "OFFSET": "53",              "LENGTH": "1",              "MIN": "32",              "DEFAULT": { "DEFAULTVALUE": "64" },              "LABEL": "NVM Size",              "DESCRIPTION": "  Define the size (in *words*) of the NVM Store.    The size must be at least 32 words, and must be a power of 2 (e.g.  64 words, 128 words, etc.).    For SPI Flash devices, the size of the NVM Store must be an integer  fraction of the size of a single SPI Flash block (see also the SPI Flash  Block Size CS key). For example with a default NVM size of 64 words the  minimum SPI Flash Block Size supported is 256 bytes (128 words). This is  to allow the SPI Flash NVM manager to store additional control  information in a separate region within the SPI Flash block.        "            },            {              "NAME": "spi_flash_block_size",              "ID": "25",              "OFFSET": "54",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "4096" },              "LABEL": "SPI Flash Block Size",              "DESCRIPTION": "  This key specifies the size in *bytes* of a single erasable block within  the SPI Flash boot device, and is used by the SPI Flash NVM manager. This  information is usually obtained from the data-sheet for the selected  memory device and should be set accordingly. It is MANDATORY to be set equal to  flash erase sector size if nvm_num_spi_blocks is 2.    If spi_flash_block_size is smaller than the flash erase block size and  nvm_num_spi_blocks is 1, then some of the storage in the flash block is  unused(and thus wasted). If spi_flash_block_size is smaller than the  flash erase block size and nvm_num_spi_blocks is 2 then erase operations  will span multiple NVM blocks and data corruption will occur.  If spi_flash_block_size is larger than the flash erase block size then an  NVM erase will only erase part of the block, and subsequent writes to the  unerased area will fail. This last scenario occurs whether  nvm_num_spi_blocks is 1 or 2.    If the SPI Flash Block Size is more than double the 'NVM Size' parameter  then the SPI Flash NVM manager is able to write to the NVM multiple times  before the SPI Flash block need to be erased. This reduces the chance of  data corruption if the power fails during a write operation.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "nvm_num_spi_blocks",              "ID": "26",              "OFFSET": "55",              "LENGTH": "1",              "MAX": "2",              "MIN": "1",              "DEFAULT": { "DEFAULTVALUE": "1" },              "LABEL": "NVM SPI Flash Number of Blocks",              "DESCRIPTION": "  For NVM stored in a SPI Flash device, this keys specifies the number of  consecutive erasable SPI Flash memory blocks that are available for the  NVM.    If two blocks are available then when the first block becomes full, the  SPI Flash NVM manager will be able to automatically copy the information  into the second (spare) block before the first block is erased. This will  reduce the chance of data corruption if the power fails during a write  operation.  If only one block is available, then when it becomes full the  application will need to erase the block (and optionally copy existing  data back into it) before new information can be stored. This introduces  a small window in which power loss could result in loss of data.    The current implementation of the SPI Flash NVM manager supports a  maximum of two blocks.    This key is not used if the NVM is stored in an I2C EEPROM.        "            },            {              "NAME": "i2c_eeprom_init_time",              "ID": "27",              "OFFSET": "56",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2000" },              "LABEL": "I2C EEPROM Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by an I2C EEPROM  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the I2C bus is enabled or the I2C clock speed is  changed. This applies to high-level NVM access, via NvmConfigureI2cEeprom(),  and lower-level I2C bus access, via I2cInit(), I2cConfigClock(), and I2cEnable().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "spi_flash_init_time",              "ID": "28",              "OFFSET": "57",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "10000" },              "LABEL": "SPI Flash Initialisation Time",              "DESCRIPTION": "  This key defines the minimum time (in microseconds) required by a SPI Flash  device to complete internal initialisation. The delay is automatically used  by the Firmware whenever the SPI bus is enabled. This applies to high-level  NVM access, via NvmConfigureSpiFlash(), and lower-level SPI bus access, via  SpiFlashInit().    The default value chosen for this key is intended to provide a \"safe\" delay  suitable for most devices. However, the value should always be confirmed for  individual product designs.        "            },            {              "NAME": "temperature_adjust",              "ID": "29",              "OFFSET": "58",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "0" },              "LABEL": "Thermometer offset adjustment",              "DESCRIPTION": "  This key sets an offset adjustment to the temperature calculated by the  system.  Any offset in the reported temperature can be adjusted on a per  device basis using this key.  The system will however operate correctly  without this key being explicitly set since the default applies no offset.    NOTE:  This offset value must be entered as a two's complement number  with maximum offsets of 7 and -7 or 0x0007 and 0xFFF9 respectively.    WARNING! Setting an offset value beyond the stated limits is not  permitted and may cause incorrect system operation.        "            },            {              "NAME": "radio_data_win_min",              "ID": "30",              "OFFSET": "59",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65336" },              "LABEL": "Radio Data Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should  only be changed on advice from CSR.        "            },            {              "NAME": "radio_data_win_max",              "ID": "31",              "OFFSET": "60",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "1250" },              "LABEL": "Radio Data Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to data transfer. It is  for CSR use only.    WARNING! This value is critical for correct system startup and should        "            },            {              "NAME": "radio_sleep_win_min",              "ID": "32",              "OFFSET": "61",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "65286" },              "LABEL": "Radio Sleep Window (Minimum)",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "radio_sleep_win_max",              "ID": "33",              "OFFSET": "62",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "2813" },              "LABEL": "Radio Sleep Window (Maximum)/",              "DESCRIPTION": "  This key sets internal radio parameters related to Deep Sleep. It is  for CSR use only.    WARNING! This value is critical for correct system operation and  should only be changed on advice from CSR.        "            },            {              "NAME": "i2c_disabled_pull_mode",              "ID": "34",              "OFFSET": "63",              "LENGTH": "1",              "DEFAULT": { "DEFAULTVALUE": "5" },              "LABEL": "I2C Pull resistors config",              "DESCRIPTION": "  This key controls the internal I2C pad pull resistors. See  \"pio_pull_mode\" for available values. Default is strong pull-down.        "            },            {              "NAME": "xtal_ftrim_keys",              "ID": "35",              "OFFSET": "64",              "LENGTH": "10",              "DEFAULT": {                "DEFAULTVALUE": [                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0",                  "0"                ]              },              "LABEL": "Crystal frequency compensation keys",              "DESCRIPTION": "  This key sets five pairs of \"temperature/crystal freqency compensation\"  values which are used to perform a temperature related crystal frequency  trim compensation on the 16MHz crystal. Setting the first pair of values  (and each subsequent pair), will cause the temperature trim compensation  algorithm to be applied. Setting the first pair of values to zero will  cause this algorithm not to be applied.    These settings should only be changed on advice from CSR.        "            },            {              "NAME": "bluetooth_version",              "ID": "44",              "OFFSET": "74",              "LENGTH": "1",              "MAX": "7",              "MIN": "6",              "DEFAULT": { "DEFAULTVALUE": "7" },              "LABEL": "Bluetooth Version",              "DESCRIPTION": "  This key defines if the Bluetooth stack operates as a 4.0 or 4.1 stack.    6 = 4.0 and 7 = 4.1        "            }          ]        }      ]    }  }  
